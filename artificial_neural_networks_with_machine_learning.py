# -*- coding: utf-8 -*-
"""Artificial Neural Networks with Machine Learning

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JGZkINrHuvyIw5lX7u-4-gIyo6jE707t

#**This Machine Learning Project Classifies Clothes from the Fashion MNIST Data set using Artificial Neural Networks and Python.**
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

"""

```
# To load the data set
```

"""

fashion = keras.datasets.fashion_mnist
(trainImages, trainLabels), (testImages, testLabels) = fashion.load_data()
imgIndex = 0
img = trainImages[imgIndex]
print("Image Label :",trainLabels[imgIndex])
plt.imshow(img)

#To print the shape of the training and testing data

print(trainImages.shape)
print(testImages.shape)

#create a Neural Network
model = keras.Sequential([
                          keras.layers.Flatten(input_shape=(28,28)),
                          keras.layers.Dense(128, activation=tf.nn.relu),
                          keras.layers.Dense(10, activation=tf.nn.softmax)
])

#Compile the Model
model.compile(optimizer = 'adam',
           loss = 'sparse_categorical_crossentropy',
           metrics=['accuracy'])

#Train the model
model.fit(trainImages, trainLabels, epochs=5, batch_size=32)

# Evaluate the Model
model.evaluate(testImages, testLabels)

#Prediction
predictions = model.predict(testImages[0:5])

# Print the predicted labels
print(predictions)

#To print the maximum labels
print(np.argmax(predictions, axis=1))
# Print the actual label values
print(testLabels[0:5])

for i in range(0,5):
  plt.imshow(testImages[i], cmap='gray')
  plt.show()

# Evaluate the model
test_loss, test_acc = model.evaluate(testImages, testLabels)
print(f"Test accuracy: {test_acc}")

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

# Predict labels for the test dataset
test_predictions = model.predict(testImages)
predicted_labels = np.argmax(test_predictions, axis=1)

# Confusion Matrix
conf_matrix = confusion_matrix(testLabels, predicted_labels)
print("Confusion Matrix:")
print(conf_matrix)

# Classification Report
class_report = classification_report(testLabels, predicted_labels, target_names=[f'Class {i}' for i in range(10)])
print("Classification Report:")
print(class_report)

# Optional: Plot Confusion Matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=[f'Class {i}' for i in range(10)], yticklabels=[f'Class {i}' for i in range(10)])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

#best precision = 98.00%
#best recall = 95.00%
#best f1- score = 96.00%
#
#

from sklearn.metrics import roc_curve, roc_auc_score
import matplotlib.pyplot as plt
# Get model predictions (probabilities)
test_probabilities = model.predict(testImages)

# Compute ROC curve and AUC for each class
num_classes = test_probabilities.shape[1]
fpr = {}
tpr = {}
roc_auc = {}

for i in range(num_classes):
    fpr[i], tpr[i], _ = roc_curve(testLabels == i, test_probabilities[:, i])
    roc_auc[i] = roc_auc_score(testLabels == i, test_probabilities[:, i])

# Plot ROC Curve
plt.figure()
for i in range(num_classes):
    plt.plot(fpr[i], tpr[i], label=f'Class {i} (AUC = {roc_auc[i]:.2f})')

plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve for Each Class')
plt.legend(loc='best')
plt.show()

# Print AUC for each class
print("AUC Scores for each class:")
for i in range(num_classes):
    print(f'Class {i}: {roc_auc[i]:.2f}')